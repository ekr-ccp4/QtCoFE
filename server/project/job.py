#!/usr/bin/python

#  ------------------------------------------------------------------
#  Job class
#  ------------------------------------------------------------------

import os
from varut  import gitut, jsonut, utils, defs

class Job(jsonut.jObject):

    def __init__ ( self,json_str="" ):
        super(Job,self).__init__(json_str)

    def set_minimal_data ( self,name,desc,type,jobId ):
        self.name     = name   # if empty then taken from task
        self.desc     = desc   # if empty then taken from task
        self.type     = type
        self.id       = jobId
        self.jobs     = []     # child job(s)
        self.data     = []     # data generated by job to be passed on
        self.expanded = True
        return;

    def read ( self,project_repo_dir,jobID ):
    #  Lock repository before calling this function

        if not os.path.isdir(project_repo_dir):
            return utils.make_return ( "","no_project_repo_dir",
                                  "Project data repository not found" )

        result = gitut.checkout ( project_repo_dir,[] )
        if result.result != "OK":
            return result

        super(Job,self).read_json ( open (
            os.path.join ( project_repo_dir,"job." + str(jobID),
                                        defs.job_data_name())).read() )

        return utils.make_return ( "","OK","OK" )


    def write ( self,project_repo_dir ):
        file = open ( os.path.join(project_repo_dir,"job." + str(self.id),
                               defs.job_data_name()),"w" )
        file.write ( self.to_JSON() )
        file.close ()
        return


#
#  ------------------------------------------------------------------
#   Tests
#  ------------------------------------------------------------------
#

if __name__ == "__main__":
    import sys

    J = Job()
    J.set_minimal_data ( "job-name","job-desc","job-type",1 )
    print "\nJob:\n\n" + J.to_JSON()

    sys.exit(0)
